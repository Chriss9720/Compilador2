package Controller;

import Controller.Semantica.Etapa_1;
import Controller.Semantica.Etapa_2;
import Model.*;
import Vista.Pantalla;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Chriss Ya√±ez
 */
public class Compilador implements ActionListener {

    private boolean time;
    private final Pantalla pantalla;
    private final Gestor gestor = new Gestor();
    private LinkedList<Tokens> tonk;
    private LinkedList<Errores> err;
    private LinkedList<Contadores> cont;
    private LinkedList<Reservadas> reservadas;
    private LinkedList<Producciones> producciones;
    LinkedList<Ambito> ambitosTotales = new LinkedList();
    private final String[] regex = {
        "e", "E", "[a-zA-Z]", "\\_", "\\/", "\\*", "\\n", "[0-9]", "\\\"",
        "\\'", "\\+", "\\-", "\\%", "\\^", "\\!", "\\&", "\\|", "\\#", "\\<",
        "\\=", "\\>", "\\;", "\\,", "\\.", "\\(", "\\)", "\\[", "\\]", "\\{",
        "\\}", "."
    };
    private final String[][] matriz = {
        {"1", "1", "1", "500", "2", "19", "0", "7", "8", "12", "18", "20", "21", "22", "25", "26", "28", "30", "31", "35", "33", "40", "41", "42", "43", "44", "45", "46", "47", "48", "500"},
        {"1", "1", "1", "1", "-1", "-1", "-1", "1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},
        {"-27", "-27", "-27", "-27", "3", "4", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "52", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27", "-27"},
        {"3", "3", "3", "3", "3", "3", "-2", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3"},
        {"4", "4", "4", "4", "4", "5", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4"},
        {"4", "4", "4", "4", "6", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4"},
        {"-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3", "-3"},
        {"15", "15", "-19", "-19", "-19", "-19", "-19", "7", "-19", "-19", "-19", "-19", "-19", "-19", "-19", "-19", "-19", "-19", "-19", "-19", "-19", "-19", "-19", "10", "-19", "-19", "-19", "-19", "-19", "-19", "-19"},
        {"8", "8", "8", "8", "8", "8", "503", "8", "9", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8"},
        {"-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20", "-20"},
        {"501", "501", "501", "501", "501", "501", "501", "11", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501"},
        {"15", "15", "-21", "-21", "-21", "-21", "-21", "11", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21", "-21"},
        {"13", "13", "13", "13", "13", "13", "504", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13", "13"},
        {"505", "505", "505", "505", "505", "505", "505", "505", "505", "14", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505", "505"},
        {"-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22", "-22"},
        {"506", "506", "506", "506", "506", "506", "506", "16", "506", "506", "17", "17", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506", "506"},
        {"-23", "-23", "-23", "-23", "-23", "-23", "-23", "16", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23", "-23"},
        {"501", "501", "501", "501", "501", "501", "501", "16", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501", "501"},
        {"-24", "-24", "-24", "-24", "-24", "-24", "-24", "-24", "-24", "-24", "23", "-24", "-24", "-24", "-24", "-24", "-24", "-24", "-24", "49", "-24", "-24", "-24", "-24", "-24", "-24", "-24", "-24", "-24", "-24", "-24"},
        {"-25", "-25", "-25", "-25", "-25", "55", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "51", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25", "-25"},
        {"-26", "-26", "-26", "-26", "-26", "-26", "-26", "-26", "-26", "-26", "-26", "24", "-26", "-26", "-26", "-26", "-26", "-26", "-26", "50", "-26", "-26", "-26", "-26", "-26", "-26", "-26", "-26", "-26", "-26", "-26"},
        {"-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28", "-28"},
        {"-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29", "-29"},
        {"-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30", "-30"},
        {"-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31", "-31"},
        {"-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "37", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32", "-32"},
        {"-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "27", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45", "-45"},
        {"-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33", "-33"},
        {"-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "29", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44", "-44"},
        {"-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34", "-34"},
        {"-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35", "-35"},
        {"-36", "-36", "-36", "-36", "-36", "-36", "-36", "-36", "-36", "-36", "53", "-36", "-36", "-36", "-36", "-36", "-36", "-36", "38", "32", "-36", "-36", "-36", "-36", "-36", "-36", "-36", "-36", "-36", "-36", "-36"},
        {"-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37", "-37"},
        {"-38", "-38", "-38", "-38", "-38", "-38", "-38", "-38", "-38", "-38", "54", "-38", "-38", "-38", "-38", "-38", "-38", "-38", "-38", "34", "39", "-38", "-38", "-38", "-38", "-38", "-38", "-38", "-38", "-38", "-38"},
        {"-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39", "-39"},
        {"-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "57", "36", "56", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55", "-55"},
        {"-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40", "-40"},
        {"-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41", "-41"},
        {"-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42", "-42"},
        {"-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43", "-43"},
        {"-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46", "-46"},
        {"-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47", "-47"},
        {"-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48", "-48"},
        {"-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49", "-49"},
        {"-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50", "-50"},
        {"-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51", "-51"},
        {"-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52", "-52"},
        {"-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53", "-53"},
        {"-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54", "-54"},
        {"-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56", "-56"},
        {"-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57", "-57"},
        {"-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58", "-58"},
        {"-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59", "-59"},
        {"-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88", "-88"},
        {"-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87", "-87"},
        {"-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69", "-69"},
        {"-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89", "-89"},
        {"-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90", "-90"}
    };
    private final String[] encabezadoSintaxis = {"reg", "id", "main", "CHAR",
        "INT", "REAL", "BOOL", "EXP", "REG", "VOID", "FILE", ";", ",", "‚à∂", "}",
        "[", "(", ")", "+", "-", "Cont_real", "Cont_cadena", "Cont_caracter",
        "Cont_entero", "Cont_true", "Cont_false", "Cont_exponencial", "++",
        "--", "!", "**", "clean", "sqrt", "sqr", "pow", "sqrtv", "ins", "conv",
        "up", "low", "len", "asc", "val", "setcolorb", "setcolorf", "getcolorb",
        "getcolorf", "~", ">+", "<+", "<", ">=", "=>", "<=", "=<", "!=", "=",
        "==", ">", "]", "+=", "/=", "*=", "-=", "*", "#", "&", "&&", "%", "/",
        "|", "||", "{", ".", ">>", "<<", "if", "repeat", "for", "while",
        "switch", "return", "default", "break", "until", "else", "case", "$"};
    private final String[] produccion = {"PROGRAMA", "A1", "A2", "A3", "A4",
        "A5", "A6", "TIPO", "B1", "B2", "LISTA_DE_PARAMETROS",
        "C1", "DECLARACION_DE_CONSTANTES", "D1", "EXP_PASCAL", "E1", "E2",
        "FACTOR_PASCAL", "F1", "F2", "F3", "F4", "CONSTANTE_S/SIGNO",
        "ARREGLO", "G1", "SIMPLE_EXP_PASCAL", "H1", "H2", "H3",
        "TERMINO_PASCAL", "J1", "ESTATUTOS", "I1", "I2", "I3", "I4", "I5",
        "I6", "I7", "I8", "I9", "I10", "I11", "I12", "I13", "ASIGNACION",
        "FUNCIONES"};
    private final int[][] matrizSintaxis = {
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 600, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601},
        {3, 5, 11, 7, 7, 7, 7, 7, 7, 7, 7, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602},
        {603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 2, 603, 603, 11, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 11},
        {604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 4, 604, 11, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 11},
        {11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 604, 6, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 11},
        {605, 8, 605, 605, 605, 605, 605, 605, 605, 605, 605, 600, 605, 9, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605},
        {604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 11, 10, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 11},
        {606, 600, 606, 12, 13, 14, 15, 16, 17, 18, 19, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606},
        {607, 11, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 11, 607, 20, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 11},
        {604, 11, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 21, 11, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 11},
        {608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 22, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608},
        {609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 24, 23, 609, 609, 609, 609, 11, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609, 609},
        {610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 25, 26, 27, 27, 27, 27, 27, 27, 27, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610, 610},
        {600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 611, 600, 611, 611, 611, 611, 611, 611, 611, 28, 611, 611, 29, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611, 611},
        {612, 30, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 30, 612, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 30},
        {613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 11, 11, 613, 11, 613, 613, 11, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 31, 31, 31, 31, 31, 31, 613, 31, 31, 11, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 11, 613, 613, 613, 613, 613, 613, 613, 613, 613, 11, 11, 613, 613, 613, 11},
        {613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 600, 600, 613, 600, 613, 613, 600, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 128, 32, 33, 34, 35, 36, 613, 37, 38, 600, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 600, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 600},
        {614, 46, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 40, 614, 614, 614, 39, 39, 39, 39, 39, 39, 39, 43, 44, 41, 45, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 42},
        {615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 11, 11, 615, 11, 52, 47, 11, 11, 11, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 11, 11, 11, 11, 11, 11, 53, 11, 11, 11, 53, 53, 53, 53, 11, 11, 11, 11, 11, 11, 11, 11, 11, 48, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615},
        {616, 50, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 50},
        {604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 51, 604, 604, 604, 604, 11, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604},
        {617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 11, 11, 617, 11, 617, 617, 11, 11, 11, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 11, 11, 11, 11, 11, 11, 54, 11, 11, 11, 54, 54, 54, 54, 11, 11, 11, 11, 11, 11, 11, 11, 11, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617},
        {618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 55, 56, 57, 58, 59, 60, 61, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618, 618},
        {607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 62, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607},
        {607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 11, 11, 607, 11, 63, 607, 11, 11, 11, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607},
        {612, 64, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 64, 612, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 64},
        {619, 11, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 11, 619, 65, 66, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 11},
        {620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 11, 11, 620, 11, 620, 620, 11, 69, 69, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 11, 11, 11, 11, 11, 11, 620, 11, 11, 11, 620, 620, 620, 620, 620, 620, 620, 620, 620, 620, 67, 68, 11, 620, 620, 620, 620, 620, 620, 620, 620, 620, 11, 11, 620, 620, 620, 620},
        {619, 600, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 600, 619, 70, 71, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 600},
        {614, 72, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 72, 614, 614, 614, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 72},
        {621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 11, 11, 621, 11, 621, 621, 11, 11, 11, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 11, 11, 11, 11, 11, 11, 621, 11, 11, 11, 621, 621, 621, 621, 73, 75, 76, 78, 77, 74, 11, 11, 11, 621, 621, 621, 621, 621, 621, 621, 621, 621, 11, 11, 621, 621, 621, 621},
        {622, 101, 622, 622, 622, 622, 622, 622, 622, 622, 622, 11, 11, 622, 11, 622, 101, 11, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 87, 622, 79, 82, 85, 89, 90, 96, 100, 102, 11, 11, 11, 11, 622, 101},
        {623, 11, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 80, 623, 623, 11, 623, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623},
        {604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 11, 81, 604, 11, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604},
        {607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 11, 11, 607, 11, 83, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607},
        {604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 11, 84, 604, 11, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604},
        {624, 11, 624, 624, 624, 624, 624, 624, 624, 624, 624, 11, 11, 624, 11, 624, 11, 11, 624, 624, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 11, 624, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 86, 624, 11},
        {603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 88, 603, 603, 11, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603},
        {612, 91, 612, 612, 612, 612, 612, 612, 612, 612, 612, 11, 612, 612, 612, 612, 91, 612, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 91},
        {604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 11, 92, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604},
        {612, 93, 612, 612, 612, 612, 612, 612, 612, 612, 612, 11, 612, 612, 612, 612, 93, 612, 91, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 93},
        {625, 94, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 94, 625, 625, 625, 94, 11, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 625, 94, 625, 94, 94, 94, 94, 94, 94, 94, 94, 625, 625, 625, 625, 625, 94},
        {604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 95, 604, 604, 604, 604, 11, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604},
        {626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 11, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 626, 97, 98, 626, 626, 626, 626},
        {604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 99, 11, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604},
        {617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 103, 617, 617, 617, 104, 105, 106, 107, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617},
        {627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 114, 113, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 126}
    };

    public Compilador(Pantalla pantalla) {
        this.pantalla = pantalla;
        reservadas();
        producciones();
    }

    private void producciones() {
        producciones = new LinkedList();
        producciones.add(new Producciones("PROGRAMA", "A1 main ( ) { ESTATUTOS A2 }"));
        producciones.add(new Producciones("A2", "; ESTATUTOS A2"));
        producciones.add(new Producciones("A1", "REGISTRO reg IDREG id { ParamsTipoReg TIPO GID id A3 } GREG A1"));
        producciones.add(new Producciones("A3", ", ParamsTipoReg TIPO GID id A3"));
        producciones.add(new Producciones("A1", "CONST id = DECLARACION_DE_CONSTANTES GConst A4 A1"));
        producciones.add(new Producciones("A4", ", CONST id = DECLARACION_DE_CONSTANTES GConst A4"));
        producciones.add(new Producciones("A1", "GT TIPO A5 ; A1"));
        producciones.add(new Producciones("A5", "FUNC id LISTA_DE_PARAMETROS GFUNC PROGRAMA finFunc")); //Funciones
        producciones.add(new Producciones("A5", "‚à∂ GIDSIMPLE id A6 GBDIDSIMPLE"));
        producciones.add(new Producciones("A6", ", GIDSIMPLE id A6"));
        producciones.add(new Producciones("all", "Œµ"));
        producciones.add(new Producciones("TIPO", "CHAR B1"));
        producciones.add(new Producciones("TIPO", "INT B1"));
        producciones.add(new Producciones("TIPO", "REAL B1"));
        producciones.add(new Producciones("TIPO", "BOOL B1"));
        producciones.add(new Producciones("TIPO", "EXP B1"));
        producciones.add(new Producciones("TIPO", "REG IDTIPO id B1"));
        producciones.add(new Producciones("TIPO", "VOID"));
        producciones.add(new Producciones("TIPO", "FILE"));
        producciones.add(new Producciones("B1", "[ DimARR Cont_entero ] B2"));
        producciones.add(new Producciones("B2", ", [ DimARR Cont_entero ] B2"));
        producciones.add(new Producciones("LISTA_DE_PARAMETROS", "( ParamsFunc TIPO IDDF id C1 )"));
        producciones.add(new Producciones("C1", ", IDDF id C1"));
        producciones.add(new Producciones("C1", "; ParamsFunc TIPO IDDF id C1"));
        producciones.add(new Producciones("DECLARACION_DE_CONSTANTES", "+ D1"));
        producciones.add(new Producciones("DECLARACION_DE_CONSTANTES", "- D1"));
        producciones.add(new Producciones("DECLARACION_DE_CONSTANTES", "CONSTANTE_S/SIGNO"));
        producciones.add(new Producciones("D1", "Cont_real")); //156.165
        producciones.add(new Producciones("D1", "Cont_entero")); //4498
        producciones.add(new Producciones("EXP_PASCAL", "SIMPLE_EXP_PASCAL E1"));
        producciones.add(new Producciones("E1", "E2 SIMPLE_EXP_PASCAL E1"));
        producciones.add(new Producciones("E2", ">="));
        producciones.add(new Producciones("E2", "=>"));
        producciones.add(new Producciones("E2", "<="));
        producciones.add(new Producciones("E2", "=<"));
        producciones.add(new Producciones("E2", "!="));
        producciones.add(new Producciones("E2", "=="));
        producciones.add(new Producciones("E2", ">"));
        producciones.add(new Producciones("FACTOR_PASCAL", "CONSTANTE_S/SIGNO"));
        producciones.add(new Producciones("FACTOR_PASCAL", "( EXP_PASCAL )"));
        producciones.add(new Producciones("FACTOR_PASCAL", "! EXP_PASCAL"));
        producciones.add(new Producciones("FACTOR_PASCAL", "FUNCIONES"));
        producciones.add(new Producciones("FACTOR_PASCAL", "2algo ++ REVISAR id F1"));
        producciones.add(new Producciones("FACTOR_PASCAL", "2algo -- REVISAR id F1"));
        producciones.add(new Producciones("FACTOR_PASCAL", "2algo ** REVISAR id F1"));
        producciones.add(new Producciones("FACTOR_PASCAL", "REVISAR id F1"));
        producciones.add(new Producciones("F1", "( F2"));
        producciones.add(new Producciones("F1", ". item FACTOR_PASCAL"));
        producciones.add(new Producciones("F2", ")"));
        producciones.add(new Producciones("F2", "InitF EXP_PASCAL F3 FinF )"));
        producciones.add(new Producciones("F3", ", +1P EXP_PASCAL F3"));
        producciones.add(new Producciones("F1", "ARREGLO F4"));
        producciones.add(new Producciones("F1", "F4"));
        producciones.add(new Producciones("F4", "INIAS ASIGNACION EXP_PASCAL FINAS"));
        producciones.add(new Producciones("CONSTANTE_S/SIGNO", "Cont_real"));
        producciones.add(new Producciones("CONSTANTE_S/SIGNO", "Cont_cadena"));
        producciones.add(new Producciones("CONSTANTE_S/SIGNO", "Cont_caracter")); //'f'
        producciones.add(new Producciones("CONSTANTE_S/SIGNO", "Cont_entero"));
        producciones.add(new Producciones("CONSTANTE_S/SIGNO", "Cont_true"));
        producciones.add(new Producciones("CONSTANTE_S/SIGNO", "Cont_false"));
        producciones.add(new Producciones("CONSTANTE_S/SIGNO", "Cont_exponencial")); //21312e+45
        producciones.add(new Producciones("ARREGLO", "ISARR [ +LVL EXP_PASCAL -LVL ] G1 FSARR"));
        producciones.add(new Producciones("G1", "[ +LVL EXP_PASCAL -LVL ] G1"));
        producciones.add(new Producciones("SIMPLE_EXP_PASCAL", "H1 TERMINO_PASCAL H2"));
        producciones.add(new Producciones("H1", "+"));
        producciones.add(new Producciones("H1", "-"));
        producciones.add(new Producciones("H2", "| TERMINO_PASCAL H2"));
        producciones.add(new Producciones("H2", "|| TERMINO_PASCAL H2"));
        producciones.add(new Producciones("H2", "H3 TERMINO_PASCAL H2"));
        producciones.add(new Producciones("H3", "+"));
        producciones.add(new Producciones("H3", "-"));
        producciones.add(new Producciones("TERMINO_PASCAL", "FACTOR_PASCAL J1"));
        producciones.add(new Producciones("J1", "* FACTOR_PASCAL J1"));
        producciones.add(new Producciones("J1", "/ FACTOR_PASCAL J1"));
        producciones.add(new Producciones("J1", "# FACTOR_PASCAL J1"));
        producciones.add(new Producciones("J1", "& FACTOR_PASCAL J1"));
        producciones.add(new Producciones("J1", "% FACTOR_PASCAL J1"));
        producciones.add(new Producciones("J1", "&& FACTOR_PASCAL J1"));
        producciones.add(new Producciones("ESTATUTOS", ">> I1 EXP_PASCAL I2"));
        producciones.add(new Producciones("I1", "‚à∂ REVISAR id"));
        producciones.add(new Producciones("I2", ", EXP_PASCAL I2"));
        producciones.add(new Producciones("ESTATUTOS", "<< I1 REVISAR id I3 I4"));
        producciones.add(new Producciones("I3", "ARREGLO"));
        producciones.add(new Producciones("I4", ", REVISAR id I3 I4"));
        producciones.add(new Producciones("ESTATUTOS", "if ( 1010I EXP_PASCAL 1010F ) ESTATUTOS I5"));
        producciones.add(new Producciones("I5", "else ESTATUTOS"));
        producciones.add(new Producciones("ESTATUTOS", "{ ESTATUTOS I6 }"));
        producciones.add(new Producciones("I6", "; ESTATUTOS I6"));
        producciones.add(new Producciones("ESTATUTOS", "repeat ESTATUTOS until ( 1012I EXP_PASCAL 1012F )"));
        producciones.add(new Producciones("ESTATUTOS", "for ( for1I I7 for1F ; for2I I9 for2F ; for3I I10 for3F ) ESTATUTOS"));
        producciones.add(new Producciones("I7", "EXP_PASCAL for1O I8"));
        producciones.add(new Producciones("I8", ", EXP_PASCAL for1O I8"));
        producciones.add(new Producciones("I9", "for2O EXP_PASCAL"));
        producciones.add(new Producciones("I10", "for3O ESTATUTOS I11"));
        producciones.add(new Producciones("I11", ", for3O ESTATUTOS I11"));
        producciones.add(new Producciones("ESTATUTOS", "while ( 1011I EXP_PASCAL 1011F ) ESTATUTOS , CONSTANTE_S/SIGNO ‚à∂ ESTATUTOS I12 }"));
        producciones.add(new Producciones("I12", "default ‚à∂ ESTATUTOS"));
        producciones.add(new Producciones("I12", "break ; case CONSTANTE_S/SIGNO I13 ‚à∂ ESTATUTOS I12"));
        producciones.add(new Producciones("I13", ", CONSTANTE_S/SIGNO I13"));
        producciones.add(new Producciones("ESTATUTOS", "switch EXP_PASCAL { case CONSTANTE_S/SIGNO I13 ‚à∂ ESTATUTOS I12 }"));
        producciones.add(new Producciones("ESTATUTOS", "EXP_PASCAL"));
        producciones.add(new Producciones("ESTATUTOS", "Ret return EXP_PASCAL"));
        producciones.add(new Producciones("ASIGNACION", "="));
        producciones.add(new Producciones("ASIGNACION", "+="));
        producciones.add(new Producciones("ASIGNACION", "/="));
        producciones.add(new Producciones("ASIGNACION", "*="));
        producciones.add(new Producciones("ASIGNACION", "-="));
        producciones.add(new Producciones("FUNCIONES", "clean ( )"));
        producciones.add(new Producciones("FUNCIONES", "sqrt ( EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "sqr ( EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "pow ( EXP_PASCAL , EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "sqrtv ( EXP_PASCAL , EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "<+ ( EXP_PASCAL , EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", ">+ ( EXP_PASCAL , EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "ins ( EXP_PASCAL , EXP_PASCAL , EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "conv ( EXP_PASCAL , EXP_PASCAL , EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "up ( EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "low ( EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "len ( EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "asc EXP_PASCAL"));
        producciones.add(new Producciones("FUNCIONES", "val EXP_PASCAL"));
        producciones.add(new Producciones("FUNCIONES", "setcolorb ( EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "setcolorf ( EXP_PASCAL )"));
        producciones.add(new Producciones("FUNCIONES", "getcolorb ( )"));
        producciones.add(new Producciones("FUNCIONES", "getcolorf ( )"));
        producciones.add(new Producciones("FUNCIONES", "$ REVISAR id . EXP_PASCAL , Cont_cadena"));
        producciones.add(new Producciones("FUNCIONES", "~ REVISAR id"));
        producciones.add(new Producciones("E2", "<"));
    }

    private void reservadas() {
        reservadas = new LinkedList();
        reservadas.add(new Reservadas("if", -4));
        //reservadas.add(new Reservadas("then", -5));
        reservadas.add(new Reservadas("while", -6));
        //reservadas.add(new Reservadas("do", -7));
        reservadas.add(new Reservadas("for", -8));
        //reservadas.add(new Reservadas("func", -9));
        //reservadas.add(new Reservadas("Proc", -10));
        reservadas.add(new Reservadas("switch", -11));
        //reservadas.add(new Reservadas("int", -12));
        //reservadas.add(new Reservadas("String", -13));
        //reservadas.add(new Reservadas("float", -14));
        //reservadas.add(new Reservadas("char", -15));
        //reservadas.add(new Reservadas("Boolean", -16));
        reservadas.add(new Reservadas("true", -17));
        reservadas.add(new Reservadas("false", -18));
        //sintaxis
        reservadas.add(new Reservadas("reg", -60));
        reservadas.add(new Reservadas("main", -61));
        reservadas.add(new Reservadas("REAL", -62));
        reservadas.add(new Reservadas("BOOL", -63));
        reservadas.add(new Reservadas("EXP", -64));
        reservadas.add(new Reservadas("REG", -65));
        reservadas.add(new Reservadas("VOID", -66));
        reservadas.add(new Reservadas("FILE", -67));
        reservadas.add(new Reservadas(":", -68));
        reservadas.add(new Reservadas("**", -69));
        //funciones
        reservadas.add(new Reservadas("clean", -70));
        reservadas.add(new Reservadas("sqrt", -71));
        reservadas.add(new Reservadas("sqr", -72));
        reservadas.add(new Reservadas("pow", -73));
        reservadas.add(new Reservadas("sqrtv", -74));
        reservadas.add(new Reservadas("ins", -75));
        reservadas.add(new Reservadas("conv", -76));
        reservadas.add(new Reservadas("up", -77));
        reservadas.add(new Reservadas("low", -78));
        reservadas.add(new Reservadas("len", -79));
        reservadas.add(new Reservadas("asc", -80));
        reservadas.add(new Reservadas("val", -81));
        reservadas.add(new Reservadas("setcolorb", -82));
        reservadas.add(new Reservadas("setcolorf", -83));
        reservadas.add(new Reservadas("getcolorb", -84));
        reservadas.add(new Reservadas("getcolorf", -85));
        reservadas.add(new Reservadas("~", -86));
        //otras cosas
        reservadas.add(new Reservadas("=>", -89));
        reservadas.add(new Reservadas("=<", -90));
        reservadas.add(new Reservadas("repeat", -91));
        reservadas.add(new Reservadas("return", -92));
        reservadas.add(new Reservadas("break", -93));
        reservadas.add(new Reservadas("until", -94));
        reservadas.add(new Reservadas("else", -95));
        reservadas.add(new Reservadas("$", -96));
        reservadas.add(new Reservadas("INT", -97));
        reservadas.add(new Reservadas("CHAR", -98));
        reservadas.add(new Reservadas("default", -99));
        reservadas.add(new Reservadas("case", -100));
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        ejecutar();
    }

    private void contar() {
        Thread hilo = new Thread() {
            @Override
            public void run() {
                int i = 0;
                while (time) {
                    try {
                        Thread.sleep(1000);
                        ++i;
                        String t = "0000";
                        pantalla.getTiempo().setText(t);
                        switch (String.valueOf(i).length()) {
                            case 1:
                                t = "000" + i;
                                break;
                            case 2:
                                t = "00" + i;
                                break;
                            case 3:
                                t = "0" + i;
                                break;
                            default:
                                t = "" + i;
                        }
                        pantalla.getTiempo().setText(t);
                    } catch (InterruptedException e) {
                        System.out.println(e);
                    }
                }
            }
        };
        hilo.start();
    }

    public void ejecutar() {
        this.time = true;
        contar();
        Thread e = new Thread() {
            @Override
            public void run() {
                try {
                    String text = pantalla.getCodigo().getText() + "\n";
                    tonk = new LinkedList();
                    err = new LinkedList();
                    gestor.BorrarTodo();
                    LlenarCont();
                    String c;
                    int col;
                    int est = 0;
                    String lex = "";
                    int line = 1;
                    Pattern pat1 = Pattern.compile("\\s");
                    for (int i = 0; i < text.length(); i++) {
                        c = tS(text.charAt(i));
                        col = sacarColumna(c);
                        est = tI(matriz[est][col]);
                        if (est < 0) {
                            if (est == -29 || est == -16 || est == -14 || est == -13
                                    || est == -9 || est == - 10 || est == -7 || est == -9
                                    || est == -12 || est == -15) {
                                String desc = "Caracter cambiado para la sintaxis";
                                err.add(new Errores(line, est, lex, desc, "L√©xico", 0));
                                contar(501);
                            } else {
                                if (est == -1) {
                                    est = esReservada(lex);
                                }
                                tonk.add(new Tokens(line, est, lex));
                                contar(est);
                                i--;
                            }
                            est = 0;
                            lex = "";
                        } else if (est > 499) {
                            int aux = esReservada(lex + c);
                            if (aux == -1) {
                                if (!pat1.matcher(lex + c).matches()) {
                                    String desc = erroresLexico(est);
                                    err.add(new Errores(line, est, lex + " " + c, desc, "L√©xico", 0));
                                    contar(est);
                                }
                            } else {
                                tonk.add(new Tokens(line, aux, c));
                                contar(aux);
                            }
                            est = 0;
                            lex = "";
                        } else {
                            if (est != 0) {
                                lex += c;
                            }
                        }
                        if (text.charAt(i) == '\n') {
                            line++;
                        }
                    }
                    cargarTokens();
                    //codido de sintaxis
                    //String prod = "";
                    //prod = tonk.stream().map(t -> t.getSintaxis() + " ").reduce(prod, String::concat);
                    //System.out.println("La produccion final es: " + prod);
                    remover();
                    LinkedList<String> pila = voltear(producciones.get(0).getProduce());
                    /*for (String p : pila) {
                        System.out.print(p + " ");
                    }
                    System.out.println();*/
                    boolean EFB = true;
                    boolean VR = true;
                    boolean IDREG = false;
                    boolean ParamsTipoReg = false;
                    boolean ParamsTipoRegAUX = false;
                    boolean GID = false;
                    boolean IDTIPO = false;
                    boolean DimARR = false;
                    boolean CONST = false;
                    boolean GT = false;
                    boolean GIDSIMPLE = false;
                    boolean tempAux = false;
                    boolean FUNC = false;
                    boolean ParamsFunc = false;
                    boolean ParamsFuncAUX = false;
                    boolean IDDF = false;
                    boolean REVISAR = false;
                    boolean POSPONER = false;
                    boolean POSPONER2 = false;
                    boolean INIAS = false;
                    boolean ISARR = false;
                    boolean paraBool = false;
                    boolean paraBoolAux = false;
                    boolean ArryAdd = true;
                    boolean isFunc = false;
                    boolean isRet = false;
                    boolean isReg = false;
                    boolean isReg2 = false;
                    boolean isItem = false;
                    boolean isItem2 = false;
                    boolean isDoble = false;
                    int entradaDePila, entradaDeTokens;
                    int clave = 1010;
                    int valor;
                    int paraFor = -1;
                    int totalPar = 0;
                    String igual = "";
                    setSemanticaE_1();
                    setSemanticaE_2();
                    Etapa_1 sE_1 = new Etapa_1(pantalla);
                    Etapa_2 sE_2 = new Etapa_2(pantalla);
                    sE_1.Reiniciar();
                    ObjTemp temp = new ObjTemp();
                    Registro reg = new Registro();
                    Variable var = new Variable();
                    Variable simple = new Variable();
                    Variable varAuxSe2 = new Variable();
                    Variable auxFunc = new Variable();
                    Variable auxReg = new Variable();
                    Variable auxSe2 = new Variable();
                    Funcion func = new Funcion();
                    LinkedList<Errores> listaAux = new LinkedList();
                    LinkedList<Integer> amb = new LinkedList();
                    ambitosTotales = new LinkedList();
                    ambitosTotales.add(new Ambito(0));
                    amb.add(ambitosTotales.getLast().getAmbito());
                    while (!pila.isEmpty() && !tonk.isEmpty() && EFB && VR) {
                        switch (pila.getLast()) {
                            case "REGISTRO":
                                pila.removeLast();
                                reg = new Registro();
                                reg.setAmb(amb.getLast());
                                ambitosTotales.add(new Ambito(ambitosTotales.size()));
                                amb.add(ambitosTotales.getLast().getAmbito());
                                reg.settPar(tS(ambitosTotales.getLast().getAmbito()));
                                break;
                            case "IDREG":
                                pila.removeLast();
                                IDREG = true;
                                break;
                            case "ParamsTipoReg":
                                pila.removeLast();
                                ParamsTipoReg = true;
                                break;
                            case "GID":
                                pila.removeLast();
                                GID = true;
                                break;
                            case "IDTIPO":
                                pila.removeLast();
                                IDTIPO = true;
                                break;
                            case "GREG":
                                pila.removeLast();
                                if (!reg.isError()) {
                                    listaAux = gestor.guadarItemRegistro(reg.getParams());
                                    for (Errores item : listaAux) {
                                        err.add(new Errores(item));
                                        contar(502);
                                        ambitosTotales.get(item.getAmb()).setErrores();
                                    }
                                } else {
                                    for (Errores item : listaAux) {
                                        err.add(new Errores(item));
                                        contar(503);
                                        ambitosTotales.get(item.getAmb()).setErrores();
                                    }
                                    ambitosTotales.removeLast();
                                }
                                amb.removeLast();
                                break;
                            case "DimARR":
                                pila.removeLast();
                                DimARR = true;
                                break;
                            case "CONST":
                                pila.removeLast();
                                CONST = true;
                                var = new Variable();
                                break;
                            case "GT":
                                pila.removeLast();
                                GT = true;
                                temp = new ObjTemp();
                                break;
                            case "GIDSIMPLE":
                                pila.removeLast();
                                simple.setTipo(temp.getTipo());
                                simple.setAmb(temp.getAmb());
                                simple.setDimArr(temp.getDimArr());
                                simple.settArr(temp.gettArr());
                                if (temp.getClase().isEmpty()) {
                                    simple.setClase("Var");
                                } else {
                                    simple.setClase(temp.getClase() + "/Var");
                                }
                                simple.setError(temp.isError());
                                if (!temp.getId().isEmpty()) {
                                    simple.setId(temp.getId());
                                }
                                GIDSIMPLE = true;
                                break;
                            case "GBDIDSIMPLE":
                                pila.removeLast();
                                if (!simple.isError()) {
                                    listaAux = gestor.guadarSimples(simple);
                                    if (!listaAux.isEmpty()) {
                                        for (Errores item : listaAux) {
                                            err.add(new Errores(item));
                                            contar(504);
                                            ambitosTotales.get(item.getAmb()).setErrores();
                                        }
                                    }
                                }
                                temp.setError(false);
                                simple = new Variable();
                                break;
                            case "FUNC":
                                pila.removeLast();
                                func = new Funcion();
                                func.setTipo(temp.getTipo());
                                func.setAmb(temp.getAmb());
                                func.setDimArr(temp.getDimArr());
                                func.settArr(temp.gettArr());
                                ambitosTotales.add(new Ambito(ambitosTotales.size()));
                                amb.add(ambitosTotales.getLast().getAmbito());
                                func.settPar(tS(ambitosTotales.getLast().getAmbito()));
                                if (!temp.getId().isEmpty()) {
                                    func.setId(temp.getId());
                                }
                                FUNC = true;
                                break;
                            case "finFunc":
                                pila.removeLast();
                                if (gestor.getReturn(amb.getLast())) {
                                    if (isRet) {
                                        getSemanticaE_2().add(new Semantica_E_2(
                                                1140, "return", "return",
                                                tonk.getFirst().getLiena(), "Acept",
                                                amb.getLast()));
                                    } else {
                                        getSemanticaE_2().add(new Semantica_E_2(
                                                1140, pila.getLast(), tonk.getFirst().getLexema(),
                                                tonk.getFirst().getLiena(), "ERROR",
                                                amb.getLast()));
                                        err.add(new Errores(tonk.getFirst().getLiena(), 1140,
                                                tonk.getFirst().getLexema(), "Se esperaba un return",
                                                "Semantica Etapa 2", amb.getLast()));
                                    }
                                } else if (!isRet) {
                                    getSemanticaE_2().add(new Semantica_E_2(
                                            1150, pila.getLast(), tonk.getFirst().getLexema(),
                                            tonk.getFirst().getLiena(), "Acept",
                                            amb.getLast()));
                                } else if (isRet) {
                                    getSemanticaE_2().add(new Semantica_E_2(
                                            1150, "return", "return", tonk.getFirst().getLiena(),
                                            "ERROR", amb.getLast()));
                                    err.add(new Errores(tonk.getFirst().getLiena(), 1140,
                                            "return", "los procedimientos no llevan return",
                                            "Semantica Etapa 2", amb.getLast()));
                                }
                                isRet = false;
                                amb.removeLast();
                                break;
                            case "ParamsFunc":
                                pila.removeLast();
                                ParamsFunc = true;
                                break;
                            case "GFUNC":
                                pila.removeLast();
                                listaAux = gestor.guardarFuncion(func);
                                if (!func.isError()) {
                                    if (listaAux.isEmpty()) {
                                        listaAux = gestor.guadarItemRegistro(func.getParams());
                                        for (Errores item : listaAux) {
                                            err.add(new Errores(item));
                                            contar(505);
                                            ambitosTotales.get(item.getAmb()).setErrores();
                                        }
                                    } else {
                                        for (Errores item : listaAux) {
                                            err.add(new Errores(item));
                                            contar(506);
                                            ambitosTotales.get(item.getAmb()).setErrores();
                                        }
                                        ambitosTotales.removeLast();
                                    }
                                } else {
                                    ambitosTotales.removeLast();
                                }
                                func = new Funcion();
                                break;
                            case "IDDF":
                                pila.removeLast();
                                IDDF = true;
                                break;
                            case "REVISAR":
                                pila.removeLast();
                                REVISAR = true;
                                break;
                            case "GConst":
                                pila.removeLast();
                                listaAux = gestor.guardarConstante(var);
                                if (!listaAux.isEmpty()) {
                                    for (Errores item : listaAux) {
                                        err.add(item);
                                        contar(507);
                                        ambitosTotales.get(var.getAmb()).setErrores();
                                    }
                                }
                                var = new Variable();
                                break;
                            case "Cont_real":
                                var.setTipo("REAL");
                                varAuxSe2 = getConstante(tonk.getFirst().getLexema(),
                                        tonk.getFirst().getLiena(), "REAL");
                                if (!ISARR && !isFunc) {
                                    if (INIAS || paraBool || paraFor == 11 || paraFor == 21) {
                                        sE_1.getIds().add(varAuxSe2);
                                        sE_1.getIds().getLast().setClave(clave);
                                        sE_1.getIds().getLast().setTope("Cont_real");
                                    }
                                } else if (!ArryAdd && ISARR && sE_2.getUltimo().isRegla1()) {
                                    varAuxSe2.setTope("Cont_real");
                                    sE_2.addItem(varAuxSe2);
                                }
                                if (isFunc) {
                                    regla9(auxFunc, totalPar, amb, "Cont_real");
                                }
                                if (isReg) {
                                    Error19(varAuxSe2, amb, "Cont_real");
                                }
                                break;
                            case "Cont_exponencial":
                                var.setTipo("EXP");
                                varAuxSe2 = getConstante(tonk.getFirst().getLexema(),
                                        tonk.getFirst().getLiena(), "EXP");
                                if (!ISARR && !isFunc) {
                                    if (INIAS || paraBool || paraFor == 11 || paraFor == 21) {
                                        sE_1.getIds().add(varAuxSe2);
                                        sE_1.getIds().getLast().setClave(clave);
                                        sE_1.getIds().getLast().setTope("Cont_exponencial");
                                    }
                                } else if (!ArryAdd && ISARR && sE_2.getUltimo().isRegla1()) {
                                    varAuxSe2.setTope("Cont_exponencial");
                                    sE_2.addItem(varAuxSe2);
                                }
                                if (isFunc) {
                                    regla9(auxFunc, totalPar, amb, "Cont_exponencial");
                                }
                                if (isReg) {
                                    Error19(varAuxSe2, amb, "Cont_exponencial");
                                }
                                break;
                            case "Cont_cadena":
                                var.setTipo("CHAR");
                                var.setClase("Constante/Arr");
                                varAuxSe2 = getConstante(tonk.getFirst().getLexema(),
                                        tonk.getFirst().getLiena(), "CHAR[]");
                                if (!ISARR && !isFunc) {
                                    if (INIAS || paraBool || paraFor == 11 || paraFor == 21) {
                                        sE_1.getIds().add(varAuxSe2);
                                        sE_1.getIds().getLast().setClase("Arr");
                                        sE_1.getIds().getLast().setClave(clave);
                                        sE_1.getIds().getLast().setTope("Cont_cadena");
                                    }
                                } else if (!ArryAdd && ISARR && sE_2.getUltimo().isRegla1()) {
                                    varAuxSe2.setTope("Cont_cadena");
                                    sE_2.addItem(varAuxSe2);
                                }
                                if (isFunc) {
                                    regla9(auxFunc, totalPar, amb, "Cont_cadena");
                                }
                                if (isReg) {
                                    Error19(varAuxSe2, amb, "Cont_cadena");
                                }
                                break;
                            case "Cont_caracter":
                                var.setTipo("CHAR");
                                varAuxSe2 = getConstante(tonk.getFirst().getLexema(),
                                        tonk.getFirst().getLiena(), "CHAR");
                                if (!ISARR && !isFunc) {
                                    if (INIAS || paraBool || paraFor == 11 || paraFor == 21) {
                                        sE_1.getIds().add(varAuxSe2);
                                        sE_1.getIds().getLast().setClave(clave);
                                        sE_1.getIds().getLast().setTope("Cont_caracter");
                                    }
                                } else if (!ArryAdd && ISARR && sE_2.getUltimo().isRegla1()) {
                                    varAuxSe2.setTope("Cont_caracter");
                                    sE_2.addItem(varAuxSe2);
                                }
                                if (isFunc) {
                                    regla9(auxFunc, totalPar, amb, "Cont_caracter");
                                }
                                if (isReg) {
                                    Error19(varAuxSe2, amb, "Cont_caracter");
                                }
                                break;
                            case "Cont_entero":
                                var.setTipo("INT");
                                varAuxSe2 = getConstante(tonk.getFirst().getLexema(),
                                        tonk.getFirst().getLiena(), "INT");
                                if (!ISARR && !isFunc) {
                                    if (INIAS || paraBool || paraFor == 11 || paraFor == 21) {
                                        sE_1.getIds().add(varAuxSe2);
                                        sE_1.getIds().getLast().setClave(clave);
                                        sE_1.getIds().getLast().setTope("Cont_entero");
                                    }
                                } else if (!ArryAdd && ISARR && sE_2.getUltimo().isRegla1()) {
                                    varAuxSe2.setTope("Cont_entero");
                                    sE_2.addItem(varAuxSe2);
                                }
                                if (isFunc) {
                                    regla9(auxFunc, totalPar, amb, "Cont_entero");
                                }
                                if (isReg) {
                                    Error19(varAuxSe2, amb, "Cont_entero");
                                }
                                break;
                            case "Cont_true":
                            case "Cont_false":
                                String topeAux = "";
                                switch (pila.getLast()) {
                                    case "Cont_true":
                                        topeAux = "Cont_true";
                                        break;
                                    case "Cont_false":
                                        topeAux = "Cont_false";
                                        break;
                                }
                                var.setTipo("BOOL");
                                varAuxSe2 = getConstante(tonk.getFirst().getLexema(),
                                        tonk.getFirst().getLiena(), "BOOL");
                                if (!ISARR && !isFunc) {
                                    if (INIAS || paraBool || paraFor == 11 || paraFor == 21) {
                                        sE_1.getIds().add(varAuxSe2);
                                        sE_1.getIds().getLast().setClave(clave);
                                        sE_1.getIds().getLast().setTope(topeAux);
                                    }
                                } else if (!ArryAdd && ISARR && sE_2.getUltimo().isRegla1()) {
                                    varAuxSe2.setTope(topeAux);
                                    sE_2.addItem(varAuxSe2);
                                }
                                if (isFunc) {
                                    regla9(auxFunc, totalPar, amb, topeAux);
                                }
                                if (isReg) {
                                    Error19(varAuxSe2, amb, topeAux);
                                }
                                break;
                            case "INIAS":
                                if (!INIAS) {
                                    Variable auxVar = sE_1.getIds().getLast();
                                    sE_1.Reiniciar();
                                    sE_1.getIds().add(auxVar);
                                    getSemanticaE_1().add(new Semantica_E_1());
                                    getSemanticaE_1().getLast().setLinea(auxVar.getLinea());
                                    getSemanticaE_1().getLast().setAsig(auxVar.getId().getLast());
                                }
                                INIAS = true;
                                pila.removeLast();
                                break;
                            case "FINAS":
                                pila.removeLast();
                                if (Buscar(pila, "FINAS") == 0) {
                                    INIAS = false;
                                    boolean acept = true;
                                    if (paraFor == 0) {
                                        paraFor = sE_1.contieneIguales();
                                    } else if (paraFor == 21) {
                                        paraFor = (sE_1.contieneDecOInc()) ? 22 : 21;
                                    }
                                    sE_2.revisarFunciones(sE_1.getIds(), amb).forEach(e -> err.add(new Errores(e)));
                                    varAuxSe2 = sE_1.getIds().getFirst();
                                    if (isReg) {
                                        getSemanticaE_2().add(new Semantica_E_2(
                                                1170, varAuxSe2.getTope(), varAuxSe2.getId().getFirst(),
                                                varAuxSe2.getLinea(), "Acept", amb.getLast()));
                                    }
                                    boolean resolver = true;
                                    if (!isItem) {
                                        if (varAuxSe2.getClase().contains("Constante") || varAuxSe2.getClase().contains("funcion") || varAuxSe2.getClase().contains("REG")) {
                                            if (varAuxSe2.getClase().contains("REG")) {
                                                resolver = false;
                                                sE_2.revisarREG(sE_1.getIds(), sE_1.getOperadores(), amb).forEach(e -> err.add(new Errores(e)));
                                                auxSe2 = sE_1.getIds().getFirst();
                                                auxSe2.setTope("id");
                                                sE_1.Reiniciar();
                                            } else {
                                                auxSe2 = sE_1.getIds().getFirst();
                                                auxSe2.setTope("id");
                                                String es = (varAuxSe2.getClase().contains("Constante")) ? "Constante" : "Funcion";
                                                err.add(new Errores(varAuxSe2.getLinea(), 1090,
                                                        varAuxSe2.getId().getLast(), "No se puede asingnar a una " + es,
                                                        "Semantica Etapa 2", amb.getLast()));
                                                getSemanticaE_2().add(new Semantica_E_2(1090,
                                                        "id", varAuxSe2.getId().getFirst(),
                                                        varAuxSe2.getLinea(), "ERROR", amb.getLast()));
                                            }
                                        } else {
                                            getSemanticaE_2().add(new Semantica_E_2(
                                                    1090, varAuxSe2.getTope(), varAuxSe2.getId().getFirst(),
                                                    varAuxSe2.getLinea(), "Acept", amb.getLast()));
                                        }
                                    } else {
                                        getSemanticaE_2().add(new Semantica_E_2(
                                                1170, varAuxSe2.getTope(), varAuxSe2.getId().getFirst(),
                                                varAuxSe2.getLinea(), "Acept", amb.getLast()));
                                    }
                                    if (resolver) {
                                        for (Errores i : sE_1.Resolver(true)) {
                                            if (i.getNumero() == 807 && acept) {
                                                acept = false;
                                            }
                                            i.setNumero(clave);
                                            err.add(new Errores(i));
                                            contar(509);
                                        }
                                        auxSe2 = sE_1.getIds().getFirst();
                                        auxSe2.setTope("id");
                                    }
                                    switch (clave) {
                                        case 1020:
                                            getSemanticaE_2().add(new Semantica_E_2(
                                                    clave, "=", "=",
                                                    auxSe2.getLinea(), "Acept", amb.getLast()));
                                            break;
                                        case 1021:
                                            getSemanticaE_2().add(new Semantica_E_2(
                                                    clave, "+=", "+=",
                                                    auxSe2.getLinea(), "Acept", amb.getLast()));
                                            break;
                                        case 1022:
                                            getSemanticaE_2().add(new Semantica_E_2(
                                                    clave, igual, igual,
                                                    auxSe2.getLinea(), "Acept", amb.getLast()));
                                            break;
                                    }
                                }
                                break;
                            case "ISARR":
                                pila.removeLast();
                                if (!ISARR) {
                                    ArryAdd = false;
                                    sE_2.empezar(sE_1.getIds().getLast());
                                }
                                ISARR = true;
                                break;
                            case "FSARR":
                                int aux = Buscar(pila, "FSARR");
                                if (aux == 1) {
                                    ISARR = false;
//                                    sE_2.resolver(amb).forEach(e -> {
//                                        err.add(new Errores(e));
//                                        contar(509);
//                                    });
                                }
                                pila.removeLast();
                                break;
                            case "1010I":
                            case "1011I":
                            case "1012I":
                                paraBoolAux = true;
                                switch (pila.getLast()) {
                                    case "1010I":
                                        clave = 1010;
                                        break;
                                    case "1011I":
                                        clave = 1011;
                                        break;
                                    case "1012I":
                                        clave = 1012;
                                        break;
                                }
                                pila.removeLast();
                                paraBool = true;
                                sE_1.Reiniciar();
                                break;
                            case "1010F":
                            case "1011F":
                            case "1012F":
                                switch (pila.getLast()) {
                                    case "1010F":
                                        clave = 1010;
                                        break;
                                    case "1011F":
                                        clave = 1011;
                                        break;
                                    case "1012F":
                                        clave = 1012;
                                        break;
                                }
                                pila.removeLast();
                                sE_1.Resolver(false).forEach(e -> {
                                    err.add(new Errores(e));
                                    contar(509);
                                });
                                auxSe2 = sE_1.getIds().getFirst();
                                if (auxSe2.getTipo().equals("BOOL") || auxSe2.isVariant()) {
                                    getSemanticaE_2().add(new Semantica_E_2(
                                            clave, auxSe2.getTope(), auxSe2.getId().getFirst(),
                                            auxSe2.getLinea(), "Acept", auxSe2.getAmb()));
                                } else {
                                    err.add(new Errores(auxSe2.getLinea(), clave,
                                            auxSe2.getTope(), "Debe de ser un BOOL lo que este entre ()",
                                            "Semantica Etapa 2", auxSe2.getAmb()));
                                    getSemanticaE_2().add(new Semantica_E_2(
                                            clave, auxSe2.getTope(), auxSe2.getId().getFirst(),
                                            auxSe2.getLinea(), "ERROR", auxSe2.getAmb()));
                                }
                                break;
                            case "+LVL":
                                pila.removeLast();
                                sE_2.addNodo(amb).forEach(e -> {
                                    err.add(new Errores(e));
                                    contar(509);
                                });
                                break;
                            case "-LVL":
                                pila.removeLast();
                                if (sE_2.pasoRegla1()) {
                                    sE_2.resolver(amb).forEach(e -> {
                                        err.add(new Errores(e));
                                        contar(509);
                                    });
                                } else {
                                    sE_2.getUltimo().setRegla1(true);
                                }
                                break;
                            case "for1I":
                                pila.removeLast();
                                paraFor = 0;
                                break;
                            case "for1O":
                                pila.removeLast();
                                if (paraFor > 1) {
                                    getSemanticaE_2().add(new Semantica_E_2(1080,
                                            "=", varAuxSe2.getId().getFirst(),
                                            varAuxSe2.getLinea(), "Acept", amb.getLast()));
                                } else {
                                    err.add(new Errores(varAuxSe2.getLinea(), 1080,
                                            varAuxSe2.getId().getLast(), "Debe de ser una asignacion",
                                            "Semantica Etapa 2", varAuxSe2.getAmb()));
                                    getSemanticaE_2().add(new Semantica_E_2(
                                            1080, "id", varAuxSe2.getId().getFirst(),
                                            varAuxSe2.getLinea(), "ERROR", amb.getLast()));
                                }
                                paraFor = 1;
                                break;
                            case "for1F":
                                pila.removeLast();
                                if (paraFor == 0) {
                                    getSemanticaE_2().add(new Semantica_E_2(1083, ";", "", tonk.getFirst().getLiena(), "Acept", amb.getLast()));
                                }
                                paraFor = -1;
                                break;
                            case "for2I":
                                pila.removeLast();
                                paraFor = 10;
                                break;
                            case "for2O":
                                pila.removeLast();
                                paraFor = 11;
                                break;
                            case "for2F":
                                pila.removeLast();
                                sE_1.Resolver(false).forEach(e -> err.add(new Errores(e)));
                                if (paraFor == 10) {
                                    getSemanticaE_2().add(new Semantica_E_2(1083, ";", "", tonk.getFirst().getLiena(), "Acept", amb.getLast()));
                                } else {
                                    varAuxSe2 = sE_1.getIds().getFirst();
                                    if (sE_1.getIds().getFirst().getTipo().equals("BOOL") || sE_1.getIds().getFirst().isVariant()) {
                                        getSemanticaE_2().add(new Semantica_E_2(1081,
                                                varAuxSe2.getTope(), varAuxSe2.getId().getFirst(),
                                                varAuxSe2.getLinea(), "Acept", amb.getLast()));
                                    } else {
                                        err.add(new Errores(varAuxSe2.getLinea(), 1081,
                                                varAuxSe2.getId().getLast(), "Debe de ser una condicion BOOL",
                                                "Semantica Etapa 2", varAuxSe2.getAmb()));
                                        getSemanticaE_2().add(new Semantica_E_2(
                                                1081, "id", varAuxSe2.getId().getFirst(),
                                                varAuxSe2.getLinea(), "ERROR", amb.getLast()));
                                    }
                                }
                                sE_1.Reiniciar();
                                break;
                            case "for3I":
                                pila.removeLast();
                                paraFor = 20;
                                break;
                            case "for3O":
                                pila.removeLast();
                                paraFor = 21;
                                break;
                            case "for3F":
                                pila.removeLast();
                                boolean cont = sE_1.contieneDecOInc();
                                sE_1.Resolver(false).forEach(e -> err.add(new Errores(e)));
                                if (paraFor == 20) {
                                    getSemanticaE_2().add(new Semantica_E_2(1083, ")", "", tonk.getFirst().getLiena(), "Acept", amb.getLast()));
                                } else {
                                    varAuxSe2 = sE_1.getIds().getFirst();
                                    if (paraFor == 22) {
                                        getSemanticaE_2().add(new Semantica_E_2(1082,
                                                varAuxSe2.getTope(), varAuxSe2.getId().getFirst(),
                                                varAuxSe2.getLinea(), "Acept", amb.getLast()));
                                    } else {
                                        if (cont) {
                                            getSemanticaE_2().add(new Semantica_E_2(1082,
                                                    varAuxSe2.getTope(), varAuxSe2.getId().getFirst(),
                                                    varAuxSe2.getLinea(), "Acept", amb.getLast()));
                                        } else {
                                            err.add(new Errores(varAuxSe2.getLinea(), 1082,
                                                    varAuxSe2.getId().getLast(), "Debe de incrementar o decrementar el valor",
                                                    "Semantica Etapa 2", varAuxSe2.getAmb()));
                                            getSemanticaE_2().add(new Semantica_E_2(
                                                    1082, "id", varAuxSe2.getId().getFirst(),
                                                    varAuxSe2.getLinea(), "ERROR", amb.getLast()));
                                        }
                                    }
                                }
                                sE_1.Reiniciar();
                                break;
                            case "2algo":
                                pila.removeLast();
                                isDoble = true;
                                if (paraFor == 20 || paraFor == 21) {
                                    paraFor = 22;
                                }
                                break;
                            case "InitF":
                                pila.removeLast();
                                if (!INIAS) {
                                    if (auxFunc.getClase().contains("funcion")) {
                                        if (auxFunc.getTipo().equals("VOID")) {
                                            getSemanticaE_2().add(new Semantica_E_2(1110, "id",
                                                    auxFunc.getId().getFirst(),
                                                    auxFunc.getLinea(), "Acept", amb.getLast()));
                                        } else {
                                            err.add(new Errores(auxFunc.getLinea(), 1120,
                                                    auxFunc.getId().getFirst(),
                                                    "Debe de ser un procedimiento",
                                                    "Semantica 2", amb.getLast()));
                                            getSemanticaE_2().add(new Semantica_E_2(1120,
                                                    auxFunc.getTope(), auxFunc.getId().getFirst(),
                                                    auxFunc.getLinea(), "ERROR", amb.getLast()));
                                        }
                                    } else {
                                        err.add(new Errores(auxFunc.getLinea(), 1110,
                                                auxFunc.getId().getFirst(),
                                                "Debe de ser un procedimiento",
                                                "Semantica 2", amb.getLast()));
                                        getSemanticaE_2().add(new Semantica_E_2(1110,
                                                auxFunc.getTope(), auxFunc.getId().getFirst(),
                                                auxFunc.getLinea(), "ERROR", amb.getLast()));
                                    }
                                }
                                isFunc = true;
                                totalPar++;
                                break;
                            case "FinF":
                                pila.removeLast();
                                isFunc = false;
                                totalPar = 0;
                                break;
                            case "+1P":
                                pila.removeLast();
                                totalPar++;
                                break;
                            case "Ret":
                                pila.removeLast();
                                if (amb.getLast() > 0) {
                                    isRet = true;
                                } else {
                                    err.add(new Errores(tonk.getFirst().getLiena(), 1150,
                                            "return", "No se puede poner un return en el main",
                                            "Semantica 2", amb.getLast()));
                                    getSemanticaE_2().add(new Semantica_E_2(1150,
                                            "return", "return", tonk.getFirst().getLiena(),
                                            "ERROR", amb.getLast()));
                                }
                                break;
                            case "item":
                                pila.removeLast();
                                auxReg = varAuxSe2;
                                if (!INIAS) {
                                    isReg = true;
                                    isItem = true;
                                }
                                isItem2 = true;
                                break;
                        }
                        //System.out.println(pila.getLast() + " vs " + tonk.getFirst().getSintaxis());
                        entradaDePila = entrada(pila.getLast());
                        entradaDeTokens = entrada(tonk.getFirst().getSintaxis());
                        if (entradaDePila < 0 && entradaDeTokens >= 0) {
                            valor = matrizSintaxis[getFila(pila.getLast())][entradaDeTokens];
                            if (valor > 0 && valor < 599 && valor != 11) {
                                --valor;
                                //System.out.println("Convertir: " + pila.getLast() + " -> " + producciones.get(valor).getProduce());
                                pila.removeLast();
                                pila = juntar(pila, voltear(producciones.get(valor).getProduce()));
                                /*for (String p : pila) {
                                    System.out.print(p + " ");
                                }
                                System.out.println("");*/
                            } else if (valor == 11) {
                                //System.out.println("Se va de la pila: " + pila.getLast());
                                pila.removeLast();
                            } else if (valor > 599) {
                                String desc = erroresSintaxis(valor);
                                err.add(new Errores(tonk.getFirst().getLiena(), valor,
                                        tonk.getFirst().getLexema(), desc, "Sintaxis", 0));
                                contar(510);
                                System.out.println("Error " + pila.getLast() + " vs " + tonk.getFirst().getSintaxis() + " " + valor);
                                pila.removeLast();
                                tonk.removeFirst();
                            }
                        } else if (entradaDePila >= 0 && entradaDeTokens >= 0
                                && entradaDePila == entradaDeTokens) {
                            switch (pila.getLast()) {
                                case "+=":
                                    if ((INIAS || paraBool || paraFor == 11 || paraFor == 21) && !ISARR) {
                                        clave = 1021;
                                        sE_1.getOperadores().add("=");
                                        sE_1.getIds().add(sE_1.getIds().getLast());
                                        sE_1.getOperadores().add("+");
                                    } else if (ISARR && !ArryAdd && sE_2.getUltimo().isRegla1()) {
                                        sE_2.addItem("=");
                                        sE_2.addItem(sE_1.getIds().getLast());
                                        sE_2.addItem("+");
                                    }
                                    break;
                                case "/=":
                                    igual = "/=";
                                    if ((INIAS || paraBool || paraFor == 11 || paraFor == 21) && !ISARR) {
                                        clave = 1022;
                                        sE_1.getOperadores().add("=");
                                        sE_1.getIds().add(sE_1.getIds().getLast());
                                        sE_1.getOperadores().add("/");
                                    } else if (ISARR && !ArryAdd && sE_2.getUltimo().isRegla1()) {
                                        sE_2.addItem("=");
                                        sE_2.addItem(sE_1.getIds().getLast());
                                        sE_2.addItem("/");
                                    }
                                    break;
                                case "*=":
                                    igual = "*=";
                                    if ((INIAS || paraBool || paraFor == 11 || paraFor == 21) && !ISARR) {
                                        clave = 1022;
                                        sE_1.getOperadores().add("=");
                                        sE_1.getIds().add(sE_1.getIds().getLast());
                                        sE_1.getOperadores().add("*");
                                    } else if (ISARR && !ArryAdd && sE_2.getUltimo().isRegla1()) {
                                        sE_2.addItem("=");
                                        sE_2.addItem(sE_1.getIds().getLast());
                                        sE_2.addItem("*");
                                    }
                                    break;
                                case "-=":
                                    igual = "-=";
                                    if ((INIAS || paraBool || paraFor == 11 || paraFor == 21) && !ISARR) {
                                        clave = 1022;
                                        sE_1.getOperadores().add("=");
                                        sE_1.getIds().add(sE_1.getIds().getLast());
                                        sE_1.getOperadores().add("-");
                                    } else if (ISARR && !ArryAdd && sE_2.getUltimo().isRegla1()) {
                                        sE_2.addItem("=");
                                        sE_2.addItem(sE_1.getIds().getLast());
                                        sE_2.addItem("-");
                                    }
                                    break;
                                case "=":
                                    if ((INIAS || paraBool || paraFor == 11 || paraFor == 21) && !ISARR) {
                                        clave = 1020;
                                        sE_1.getOperadores().add(pila.getLast());
                                    } else if (ISARR && sE_2.getUltimo().isRegla1()) {
                                        sE_2.addItem(pila.getLast());
                                    }
                                    break;
                                case "+":
                                case "-":
                                case "*":
                                case "<":
                                case ">=":
                                case "=>":
                                case "<=":
                                case "=<":
                                case "==":
                                case "!=":
                                case ">":
                                case "/":
                                case "#":
                                case "%":
                                case "&":
                                case "&&":
                                    if ((INIAS || paraBool || paraFor == 11 || paraFor == 21) && !ISARR) {
                                        clave = 1;
                                        sE_1.getOperadores().add(pila.getLast());
                                    } else if (ISARR && !ArryAdd && sE_2.getUltimo().isRegla1()) {
                                        sE_2.addItem(pila.getLast());
                                    }
                                    break;
                            }
                            //System.out.println("Se va de ambos: " + pila.getLast() + " <-> " + tonk.getFirst().getSintaxis());
                            String aux = tonk.getFirst().getLexema();
                            int linea = tonk.getFirst().getLiena();
                            if (IDDF) {
                                IDDF = false;
                                func.getParams().getLast().setId(aux);
                                func.getParams().getLast().setLinea(linea);
                                ParamsFuncAUX = false;
                            }
                            if (FUNC) {
                                FUNC = false;
                                if (!temp.getClase().isEmpty()) {
                                    func.setClase(func.getClase() + "/" + temp.getClase());
                                }
                                func.setTipo(temp.getTipo());
                                func.setError(temp.isError());
                                temp.setError(false);
                                func.setId(aux);
                                func.setLinea(linea);
                                tempAux = false;
                            }
                            if (GIDSIMPLE) {
                                simple.getId().add(aux);
                                simple.setLinea(linea);
                                GIDSIMPLE = false;
                            }
                            if (GT) {
                                GT = false;
                                temp.setTipo(aux);
                                temp.setAmb(amb.getLast());
                                tempAux = true;
                            }
                            if (CONST) {
                                CONST = false;
                                var.setId(aux);
                                var.setLinea(linea);
                                var.setClase("Constante");
                                var.setAmb(amb.getLast());
                            }
                            if (IDREG) {
                                reg.setLinea(linea);
                                reg.setId(aux);
                                IDREG = false;
                                listaAux = gestor.gudarRegistro(reg);
                                if (!listaAux.isEmpty()) {
                                    reg.setError(true);
                                }
                            }
                            if (IDTIPO) {
                                LinkedList<Integer> auxAmb = new LinkedList();
                                amb.forEach(i -> auxAmb.add(i));
                                if (gestor.validarREG(aux, auxAmb)) {
                                    temp.setClase("REG");
                                    temp.setTipo(aux);
                                    temp.setError(false);
                                } else {
                                    err.add(new Errores(linea, 707,
                                            aux, "No esta declarado el registro",
                                            "Ambito", amb.getLast()));
                                    contar(511);
                                    ambitosTotales.getLast().setErrores();
                                    temp.setError(true);
                                }
                                IDTIPO = false;
                            }
                            if (DimARR) {
                                String dim;
                                if (ParamsTipoRegAUX) {
                                    if (reg.getParams().getLast().getClase().contains("REG")) {
                                        reg.getParams().getLast().setClase("Item/REG/Arr");
                                    } else {
                                        reg.getParams().getLast().setClase("Item/Arr");
                                    }
                                    dim = reg.getParams().getLast().getDimArr();
                                    if (dim.isEmpty()) {
                                        dim = aux;
                                        reg.getParams().getLast().settArr(1);
                                    } else {
                                        dim += "," + aux;
                                        reg.getParams().getLast().settArr(dim.split(",").length);
                                    }
                                    reg.getParams().getLast().setDimArr(dim);
                                } else if (tempAux) {
                                    if (temp.getClase().contains("REG")) {
                                        temp.setClase("REG/Arr");
                                    } else {
                                        temp.setClase("Arr");
                                    }
                                    dim = temp.getDimArr();
                                    if (dim.isEmpty()) {
                                        dim = aux;
                                        temp.settArr(1);
                                    } else {
                                        dim += "," + aux;
                                        temp.settArr(dim.split(",").length);
                                    }
                                    temp.setDimArr(dim);
                                } else if (ParamsFuncAUX) {
                                    if (func.getParams().getLast().getClase().contains("REG")) {
                                        func.getParams().getLast().setClase("Param/REG/Arr");
                                    } else {
                                        func.getParams().getLast().setClase("Param/Arr");
                                    }
                                    dim = func.getParams().getLast().getDimArr();
                                    if (dim.isEmpty()) {
                                        dim = aux;
                                        func.getParams().getLast().settArr(1);
                                    } else {
                                        dim += "," + aux;
                                        func.getParams().getLast().settArr(dim.split(",").length);
                                    }
                                    func.getParams().getLast().setDimArr(dim);
                                }
                                DimARR = false;
                            }
                            if (GID) {
                                if (ParamsTipoRegAUX) {
                                    reg.getParams().getLast().setId(aux);
                                    reg.getParams().getLast().setLinea(linea);
                                    reg.getParams().getLast().setNoPar(reg.getParams().size());
                                    reg.getParams().getLast().setAmb(amb.getLast());
                                    reg.getParams().getLast().setError(temp.isError());
                                    temp.setError(false);
                                }
                                GID = false;
                                ParamsTipoRegAUX = false;
                            }
                            if (POSPONER) {
                                POSPONER = false;
                                reg.getParams().getLast().setTipo(temp.getTipo());
                                reg.getParams().getLast().setClase("REG/Item");
                            }
                            if (POSPONER2) {
                                POSPONER2 = false;
                                func.getParams().getLast().setError(temp.isError());
                                temp.setError(false);
                                func.getParams().getLast().setTipo(temp.getTipo());
                                func.getParams().getLast().setClase("REG/Param");
                            }
                            if (ParamsTipoReg) {
                                reg.getParams().add(new Variable());
                                if (!aux.equals("REG")) {
                                    reg.getParams().getLast().setTipo(aux);
                                } else {
                                    POSPONER = true;
                                }
                                reg.getParams().getLast().settPar(reg.getId());
                                reg.getParams().getLast().setClase("Item");
                                ParamsTipoReg = false;
                                ParamsTipoRegAUX = true;
                            }
                            if (ParamsFunc) {
                                func.getParams().add(new Variable());
                                if (!aux.equals("REG")) {
                                    func.getParams().getLast().setTipo(aux);
                                } else {
                                    POSPONER2 = true;
                                }
                                func.getParams().getLast().settPar(func.getId());
                                func.getParams().getLast().setClase("Param");
                                func.getParams().getLast().setNoPar(func.getParams().size());
                                func.getParams().getLast().setAmb(amb.getLast());
                                ParamsFunc = false;
                                ParamsFuncAUX = true;
                            }
                            if (REVISAR) {
                                REVISAR = false;
                                LinkedList<Integer> auxAmb = new LinkedList();
                                amb.forEach(i -> auxAmb.add(i));
                                Variable varAux = gestor.existe(aux, auxAmb);
                                String estadoAux;
                                if (varAux != null) {
                                    varAux.setVariant(false);
                                    estadoAux = "Acept";
                                } else {
                                    estadoAux = "ERROR";
                                    varAux = new Variable();
                                    varAux.setId(aux);
                                    varAux.setVariant(true);
                                    varAux.setAmb(amb.getLast());
                                    if (!isReg) {
                                        err.add(new Errores(linea, 706,
                                                aux, "No esta declarada la variable",
                                                "Ambito", amb.getLast()));
                                        contar(512);
                                        ambitosTotales.getLast().setErrores();
                                    }
                                }
                                varAux.setTope("id");
                                varAux.setLinea(linea);
                                if (!isReg) {
                                    getSemanticaE_2().add(new Semantica_E_2(1130, "id",
                                            varAux.getId().getFirst(), varAux.getLinea(),
                                            estadoAux, amb.getLast()));
                                }
                                varAuxSe2 = varAux;
                                if (isReg || isItem2) {
                                    isReg = false;
                                    isReg2 = true;
                                    varAux = gestor.existe(auxReg, varAuxSe2.getId().getFirst());
                                    if (varAux != null) {
                                        varAux.setVariant(false);
                                        getSemanticaE_2().add(new Semantica_E_2(1190, "id",
                                                varAux.getId().getFirst(), linea,
                                                "Acept", amb.getLast()));
                                    } else {
                                        varAux = new Variable();
                                        varAux.setId(aux);
                                        varAux.setVariant(true);
                                        varAux.setAmb(amb.getLast());
                                        getSemanticaE_2().add(new Semantica_E_2(1190, "id",
                                                varAux.getId().getFirst(), linea,
                                                "ERROR", amb.getLast()));
                                        err.add(new Errores(linea, 1190,
                                                aux, "No esta declarado el item",
                                                "Semantica 2", amb.getLast()));
                                    }
                                    varAux.setTope("id");
                                    varAux.setLinea(linea);
                                    varAuxSe2 = varAux;
                                }
                                if (isDoble) {
                                    if (varAuxSe2.isVariant()) {
                                        getSemanticaE_2().add(new Semantica_E_2(1180, "id",
                                                varAux.getId().getFirst(), linea,
                                                "Acept", amb.getLast()));
                                    } else {
                                        if (varAuxSe2.getTipo().equals("INT")
                                                || varAuxSe2.getTipo().equals("REAL")
                                                || varAuxSe2.getTipo().equals("EXP")) {
                                            getSemanticaE_2().add(new Semantica_E_2(1180, "id",
                                                    varAux.getId().getFirst(), linea,
                                                    "Acept", amb.getLast()));
                                        } else {
                                            getSemanticaE_2().add(new Semantica_E_2(1180, "id",
                                                    varAux.getId().getFirst(), linea,
                                                    "ERROR", amb.getLast()));
                                            err.add(new Errores(linea, 1190, aux,
                                                    "Los operadores unarios solo puede ser aplicados a valores numericos",
                                                    "Semantica 2", amb.getLast()));
                                        }
                                    }
                                }
                                if (isFunc) {
                                    regla9(auxFunc, totalPar, amb, "id");
                                } else {
                                    auxFunc = varAuxSe2;
                                }
                                if (!ISARR) {
                                    if (isReg2 || isItem2) {
                                        isReg2 = false;
                                        isItem2 = false;
                                        sE_1.getIds().removeLast();
                                    }
                                    sE_1.getIds().add(varAux);
                                } else if (sE_2.getUltimo().isRegla1()) {
                                    if (isReg2 || isItem2) {
                                        sE_2.removeLast();
                                        isReg2 = false;
                                        isItem2 = false;
                                    }
                                    sE_2.addItem(varAux);
                                }
                                if (paraBoolAux) {
                                    paraBoolAux = false;
                                    Variable auxVar = sE_1.getIds().getLast();
                                    sE_1.Reiniciar();
                                    sE_1.getIds().add(auxVar);
                                    sE_1.getIds().getLast().setClave(clave);
                                }
                            }
                            pila.removeLast();
                            tonk.removeFirst();
                        } else if (entradaDePila >= 0 && entradaDeTokens >= 0
                                && entradaDePila != entradaDeTokens) {
                            JOptionPane.showMessageDialog(pantalla, "Error de fuerza bruta",
                                    "Error", JOptionPane.ERROR_MESSAGE);
                            EFB = false;
                            err.add(new Errores(tonk.getFirst().getLiena(), 628,
                                    tonk.getFirst().getLexema(),
                                    "Error de fuerza bruta", "Sintaxis", amb.getLast()));
                            contar(513);
                            //System.out.println("FB");
                            //System.out.println(pila.getLast() + " " + tonk.getFirst().getSintaxis());
                        } else {
                            System.err.println("MMM");
                        }
                    }
                    if (!pila.isEmpty() && EFB && err.isEmpty()) {
                        int linea = tI(tS(pantalla.getTokens().getValueAt(pantalla.getTokens().getModel().getRowCount() - 1, 2)));
                        String v = tS(pantalla.getTokens().getValueAt(pantalla.getTokens().getModel().getRowCount() - 1, 1));
                        String m1 = "Falta: ";
                        for (String p : pila) {
                            m1 += p + " ";
                        }
                        err.add(new Errores(linea, 629, v, m1, "Sintaxis", 0));
                        contar(514);
                    }
                    cargarErrores();
                    carcarContadores();
                    time = false;
                    if (err.isEmpty()) {
                        JOptionPane.showMessageDialog(pantalla, "Procesado con exito, sin errores", "Exito", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(pantalla, "Se encontraron errores", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } finally {
                    time = false;
                    pantalla.setAmb(ambitosTotales);
                }
            }
        };
        e.start();
    }

    private void Error19(Variable var, LinkedList<Integer> amb, String tope) {
        getSemanticaE_2().add(new Semantica_E_2(1190, "id",
                var.getId().getFirst(), var.getLinea(),
                "ERROR", amb.getLast()));
        err.add(new Errores(var.getLinea(), 1190,
                tope, "No esta declarado el item",
                "Semantica 2", amb.getLast()));
    }

    private void regla9(Variable var, int totalPar, LinkedList<Integer> amb, String tope) {
        if (totalPar <= var.getNoPar()) {
            getSemanticaE_2().add(new Semantica_E_2(1100, var.getTope(), var.getId().getFirst(),
                    var.getLinea(), "Acept", amb.getLast()));
        } else {
            err.add(new Errores(var.getLinea(), 1100, var.getId().getLast(),
                    "El parametro: " + totalPar + " esta fuera de rango",
                    "Semantica Etapa 2", amb.getLast()));
            getSemanticaE_2().add(new Semantica_E_2(1100, tope, var.getId().getFirst(),
                    var.getLinea(), "ERROR", amb.getLast()));
        }
    }

    private int Buscar(LinkedList<String> p, String cadena) {
        int total = 0;
        total = p.stream().filter(item -> (item.equals(cadena))).map(_item -> 1).reduce(total, Integer::sum);
        return total;
    }

    private Variable getConstante(String aux, int linea, String tipo) {
        Variable auxVar = new Variable();
        auxVar.setId(aux);
        auxVar.setLinea(linea);
        auxVar.setTipo(tipo);
        return auxVar;
    }

    private void remover() {
        for (int i = tonk.size() - 1; i > -1; i--) {
            if (tonk.get(i).getToken() == -2 || tonk.get(i).getToken() == -3
                    || tonk.get(i).getToken() == -29 || tonk.get(i).getToken() == -5
                    || tonk.get(i).getToken() == -7 || tonk.get(i).getToken() == -9
                    || tonk.get(i).getToken() == -10 || tonk.get(i).getToken() == -12
                    || tonk.get(i).getToken() == -13 || tonk.get(i).getToken() == -14
                    || tonk.get(i).getToken() == -15 || tonk.get(i).getToken() == -16) {
                tonk.remove(i);
            }
        }
    }

    private String erroresLexico(int valor) {
        String desc;
        switch (valor) {
            case 500:
                desc = "Caracter no reconocido";
                break;
            case 501:
                desc = "Se esperaba un digito";
                break;
            case 502:
                desc = "Se esperaba una barra / o un asterisco";
                break;
            case 503:
                desc = "Se esparaba una comilla doble(\")";
                break;
            case 504:
                desc = "Se esparaba un caracter valido";
                break;
            case 505:
                desc = "Se esparaba una comilla simple '";
                break;
            case 506:
                desc = "Se esperaba un digito, un + √≥ un -";
                break;
            default:
                desc = "Error no registrado";
        }
        return desc;
    }

    private String erroresSintaxis(int valor) {
        String desc = "";
        switch (valor) {
            case 600:
                desc = "Erro de sincronizacion";
                break;
            case 601:
                desc = "Se esperaba un reg id main o TIPO";
                break;
            case 602:
                desc = "Se esperaba un reg id o TIPO";
                break;
            case 603:
                desc = "Se esperaba un ;";
                break;
            case 604:
                desc = "Se esperaba una ,";
                break;
            case 605:
                desc = "Se esperaba un id o :";
                break;
            case 606:
                desc = "Se esperaba un TIPO";
                break;
            case 607:
                desc = "Se esperaba un [";
                break;
            case 608:
                desc = "Se esperaba un (";
                break;
            case 609:
                desc = "Se esperaba un , o :";
                break;
            case 610:
                desc = "Se esperaba un + - o una constante";
                break;
            case 611:
                desc = "Se esperaba una consante real o entero";
                break;
            case 612:
                desc = "\"Se esperaba un Cont_real  Cont_cadena  Cont_caracter\n"
                        + "Cont_entero  Cont_true  Cont_false\n"
                        + "Cont_exponencial\n"
                        + "( ¬° id+ -\n"
                        + "++ \n"
                        + "-- \n"
                        + "**\n"
                        + "clean sqrt sqr pow sqrtv ins conv up \n"
                        + "low len asc val setcolorb setcolorg\n"
                        + " getcolorf getcolorb $ ~\n"
                        + "<+ \n"
                        + ">+\"";
                break;
            case 613:
                desc = "Se esperaba ‚â• => ‚â§ =<!= = >";
                break;
            case 614:
                desc = "\"Se esperaba Cont_real  Cont_cadena  Cont_caracter\n"
                        + " Cont_entero  Cont_true  Cont_false\n"
                        + "Cont_exponencial\n"
                        + "( ! ++ -- **id\n"
                        + "clean sqrt sqr pow sqrtv ins conv up \n"
                        + "low len asc val setcolorb setcolorg\n"
                        + " getcolorf getcolorb $ ~\n"
                        + "<+ \n"
                        + ">+\n"
                        + "\"";
                break;
            case 615:
                desc = "Se esperaba ( [   = += /= *= -=";
                break;
            case 616:
                desc = "\"se esperaba Cont_real  Cont_cadena  Cont_caracter\n"
                        + " Cont_entero  Cont_true  Cont_false\n"
                        + "Cont_exponencial\n"
                        + "( ¬° id+ - .)\n"
                        + "++ \n"
                        + "-- \n"
                        + "**\n"
                        + "clean sqrt sqr pow sqrtv ins conv up \n"
                        + "low len asc val setcolorb setcolorg\n"
                        + " getcolorf getcolorb $ ~\n"
                        + "<+ \n"
                        + ">+\n"
                        + "\"";
                break;
            case 617:
                desc = "Se esperaba = += /= *= -=";
                break;
            case 618:
                desc = "\"Se esperaba Cont_real  Cont_cadena  Cont_caracter\n"
                        + " Cont_entero  Cont_true  Cont_false\n"
                        + "Cont_exponencial\n"
                        + "\"";
                break;
            case 619:
                desc = "Se esperaba + o -";
                break;
            case 620:
                desc = "Se esperaba + - || o |";
                break;
            case 621:
                desc = "Se esperaba *# & && % /";
                break;
            case 622:
                desc = "\"Se esperaba ‚â´ ‚â™ if { repeat for while switch  return \n"
                        + "Cont_real  Cont_cadena  Cont_caracter\n"
                        + " Cont_entero  Cont_true  Cont_false\n"
                        + "Cont_exponencial\n"
                        + "( ¬° id+ -\n"
                        + "++ \n"
                        + "-- \n"
                        + "**\n"
                        + "clean sqrt sqr pow sqrtv ins conv up \n"
                        + "low len asc val setcolorb setcolorg\n"
                        + " getcolorf getcolorb $ ~\n"
                        + "<+ \n"
                        + ">+\n"
                        + "\"";
                break;
            case 623:
                desc = "Se esperaban :";
                break;
            case 624:
                desc = "Se esperaba un else";
                break;
            case 625:
                desc = "\"Se esperaba ) ,\n"
                        + ": ‚â™ if { repeat for while switch  return \n"
                        + "Cont_real  Cont_cadena  Cont_caracter\n"
                        + " Cont_entero  Cont_true  Cont_false\n"
                        + "Cont_exponencial\n"
                        + "( ¬° id+ -\n"
                        + "++ \n"
                        + "-- \n"
                        + "**\n"
                        + "clean sqrt sqr pow sqrtv ins conv up \n"
                        + "low len asc val setcolorb setcolorg\n"
                        + " getcolorf getcolorb $ ~\n"
                        + "<+ \n"
                        + ">+\n"
                        + "\"";
                break;
            case 626:
                desc = "Se esperaba default o break";
                break;
            case 627:
                desc = "\"Se esperaba clean sqrt sqr pow sqrtv ins conv up \n"
                        + "low len asc val setcolorb setcolorg\n"
                        + " getcolorf getcolorb $ ~\n"
                        + "<+ \n"
                        + ">+\n"
                        + "\"";
                break;
        }
        return desc;
    }

    private LinkedList<String> juntar(LinkedList<String> lista1,
            LinkedList<String> lista2) {
        while (!lista2.isEmpty()) {
            lista1.add(lista2.getFirst());
            lista2.removeFirst();
        }
        return lista1;
    }

    private int getFila(String t) {
        for (int j = 0; j < this.produccion.length; j++) {
            if (this.produccion[j].equals(t)) {
                return j;
            }
        }
        return -1;
    }

    private LinkedList<String> voltear(String produccion) {
        String[] original = produccion.split(" ");
        LinkedList<String> retorna = new LinkedList();
        for (int i = 0, j = original.length - 1; i < original.length; i++, j--) {
            retorna.add(original[j]);
        }
        return retorna;
    }

    private int entrada(String t) {
        for (int i = 0; i < encabezadoSintaxis.length; i++) {
            if (t.equals(this.encabezadoSintaxis[i])) {
                return i;
            }
        }
        return -1;
    }

    private int esReservada(String lex) {
        int r = -1;
        for (int i = 0; i < reservadas.size() && r == -1; i++) {
            if (reservadas.get(i).getPalabra().equals(lex)) {
                r = reservadas.get(i).getToken();
            }
        }
        return r;
    }

    private void LlenarCont() {
        cont = new LinkedList();
        cont.add(new Contadores(0, "Erroes"));
        cont.add(new Contadores(0, "Identificadores"));
        cont.add(new Contadores(0, "Comentarios"));
        cont.add(new Contadores(0, "Palabras reservadas"));
        cont.add(new Contadores(0, "C-Enteras"));
        cont.add(new Contadores(0, "C-Texto"));
        cont.add(new Contadores(0, "C-Decimal"));
        cont.add(new Contadores(0, "C-Car√°cter"));
        cont.add(new Contadores(0, "C-Exponencial"));
        cont.add(new Contadores(0, "Aritmeticos"));
        cont.add(new Contadores(0, "Monogamo"));
        cont.add(new Contadores(0, "Logico"));
        cont.add(new Contadores(0, "Relacionales"));
        cont.add(new Contadores(0, "Bit"));
        cont.add(new Contadores(0, "Puntuaci√≥n"));
        cont.add(new Contadores(0, "Agrupaci√≥n"));
        cont.add(new Contadores(0, "Asignaci√≥n"));
        cont.add(new Contadores(0, "Sintaxis"));
        cont.add(new Contadores(0, "Funciones"));
    }

    private void contar(int est) {
        if (est > 499) {
            cont.get(0).setCant(cont.get(0).getCant() + 1);
        } else if (est == -1) {
            cont.get(1).setCant(cont.get(1).getCant() + 1);
        } else if (est == -2 || est == -3) {
            cont.get(2).setCant(cont.get(2).getCant() + 1);
        } else if (est < -2 && est > -19) {
            cont.get(3).setCant(cont.get(3).getCant() + 1);
        } else if (est == -19) {
            cont.get(4).setCant(cont.get(4).getCant() + 1);
        } else if (est == -20) {
            cont.get(5).setCant(cont.get(5).getCant() + 1);
        } else if (est == -21) {
            cont.get(6).setCant(cont.get(6).getCant() + 1);
        } else if (est == -22) {
            cont.get(7).setCant(cont.get(7).getCant() + 1);
        } else if (est == -23) {
            cont.get(8).setCant(cont.get(8).getCant() + 1);
        } else if (est < -23 && est > -30) {
            cont.get(9).setCant(cont.get(9).getCant() + 1);
        } else if (est == -30 || est == -31) {
            cont.get(10).setCant(cont.get(10).getCant() + 1);
        } else if (est < -31 && est > -36) {
            cont.get(11).setCant(cont.get(11).getCant() + 1);
        } else if (est < -35 && est > -42) {
            cont.get(12).setCant(cont.get(12).getCant() + 1);
        } else if (est < -41 && est > -46) {
            cont.get(13).setCant(cont.get(13).getCant() + 1);
        } else if (est < -45 && est > -49) {
            cont.get(14).setCant(cont.get(14).getCant() + 1);
        } else if (est < -48 && est > -55) {
            cont.get(15).setCant(cont.get(15).getCant() + 1);
        } else if (est < -54 && est > -60) {
            cont.get(16).setCant(cont.get(16).getCant() + 1);
        } else if (est < -69 && est > -90) {
            cont.get(18).setCant(cont.get(18).getCant() + 1);
        } else if (est < -59) {
            cont.get(17).setCant(cont.get(17).getCant() + 1);
        }
    }

    private void cargarTokens() {
        DefaultTableModel modelo = new DefaultTableModel(new Object[][]{}, new String[]{"Estado", "Lexema", "Linea"});
        tonk.forEach(item -> {
            modelo.addRow(new Object[]{item.getToken(), item.getLexema(), item.getLiena()});
        });
        pantalla.getTokens().setModel(modelo);
        centrar(pantalla.getTokens());
    }

    private void cargarErrores() {
        DefaultTableModel modelo = new DefaultTableModel(new Object[][]{}, new String[]{"Token", "Descripci√≥n", "Lexema", "Tipo", "Linea"});
        err.forEach(item -> {
            modelo.addRow(new Object[]{item.getNumero(), item.getDesc(), item.getLexema(), item.getTipo(), item.getLiena()});
        });
        pantalla.getErrores().setModel(modelo);
        centrar(pantalla.getErrores());
    }

    private void carcarContadores() {
        DefaultTableModel modelo = new DefaultTableModel(new Object[][]{}, new String[]{"Nombre", "Cantidad"});
        cont.forEach(item -> {
            modelo.addRow(new Object[]{item.getNombre(), item.getCant()});
        });
        pantalla.getContadores().setModel(modelo);
        centrar(pantalla.getContadores());
    }

    private int sacarColumna(String c) {
        Pattern pat;
        Matcher mat;
        for (int i = 0; i < matriz[0].length; i++) {
            pat = Pattern.compile(regex[i]);
            mat = pat.matcher(c);
            if (mat.matches()) {
                return i;
            }
        }
        return -1;
    }

    private String tS(Object obj) {
        return String.valueOf(obj);
    }

    private int tI(Object obj) {
        return Integer.parseInt(tS(obj));
    }

    private void centrar(JTable table) {
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(tcr);
        }
    }

    public LinkedList<Semantica_E_1> getSemanticaE_1() {
        return pantalla.getsE_1();
    }

    public void setSemanticaE_1() {
        this.pantalla.setsE_1();
    }

    public LinkedList<Semantica_E_2> getSemanticaE_2() {
        return pantalla.getsE_2();
    }

    public void setSemanticaE_2() {
        this.pantalla.setsE_2();
    }

}
